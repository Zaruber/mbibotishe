import os
import logging
import asyncio
import requests
import re
import nest_asyncio  # –î–æ–±–∞–≤–ª—è–µ–º nest_asyncio –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ü–∏–∫–ª–∞–º–∏
from bs4 import BeautifulSoup
from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, ContextTypes

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    from config import BOT_TOKEN, GROUP_ID
except ImportError:
    # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    print("""
    –û–®–ò–ë–ö–ê: –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω!
    
    –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª config.py –Ω–∞ –æ—Å–Ω–æ–≤–µ config_example.py:
    1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ config_example.py –≤ config.py
    2. –û—Ç–∫—Ä–æ–π—Ç–µ config.py –∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram –±–æ—Ç–∞
    
    –ü—Ä–∏–º–µ—Ä:
    BOT_TOKEN = "–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞"
    GROUP_ID = "2471"  # ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    """)
    import sys
    sys.exit(1)

# –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è nested event loops
nest_asyncio.apply()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTML
def preprocess_html(html_content):
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π HTML –ø–µ—Ä–µ–¥ –ø–∞—Ä—Å–∏–Ω–≥–æ–º.
    """
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤–Ω–µ —Å—Ç—Ä–æ–∫ (—Å—Ä–∞–∑—É –ø–æ—Å–ª–µ </tr>)
    html_content = re.sub(r'</tr>\s*(<td[^>]*>)', r'</tr><tr>\1', html_content)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π </tr> –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    html_content = re.sub(r'(</td>)\s*(<tr|<table|$)', r'\1</tr>\2', html_content)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã href –≤ —Ç–µ–≥–∞—Ö <a>, –∑–∞–∫–ª—é—á–∞—è URL –≤ –∫–∞–≤—ã—á–∫–∏
    html_content = re.sub(r'<a\s+href=([^ >]+)([^>]*?)>', r'<a href="\1"\2>', html_content)
    
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–≥–æ–≤ <a>
    html_content = re.sub(r'<a([^>]*?)[\r\n]+([^>]*?)>', r'<a\1 \2>', html_content)
    
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–±—ã—á–Ω—ã–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    html_content = html_content.replace('&nbsp;', ' ')
    
    return html_content

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–Ω—è—Ç–∏—è
def extract_lesson_details(cell):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ –∏–∑ —è—á–µ–π–∫–∏ —Ç–∞–±–ª–∏—Ü—ã."""
    if not cell or not hasattr(cell, 'text'):
        return None
        
    text = cell.text.strip()
    
    # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
    if not text or text == " ":
        return None
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
    link = cell.find('a')
    link_url = None
    if link and 'href' in link.attrs:
        link_url = link['href'].strip()
        # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ –ø—Ä–æ–±–µ–ª—ã –∏–∑ URL
        link_url = link_url.replace('\n', '').replace('\r', '').replace(' ', '%20')
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –ø–æ–º–µ—Ç–∫–∞ "–û–ù–õ–ê–ô–ù"
    is_online = '–û–ù–õ–ê–ô–ù' in text
    
    # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–Ω—è—Ç–∏—è
    # –ü–∞—Ç—Ç–µ—Ä–Ω: –ü—Ä–µ–¥–º–µ—Ç -–¢–∏–ø, –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –∞—É–¥. –ê—É–¥–∏—Ç–æ—Ä–∏—è
    
    result = {
        'full_text': text,
        'is_online': is_online,
        'link': link_url
    }
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –∏ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
    subject_type_match = re.match(r'^([^,]+?)(?:\s+-([^,]+))?(?:,|$)', text)
    if subject_type_match:
        if subject_type_match.group(1):
            result['subject'] = subject_type_match.group(1).strip()
        if subject_type_match.group(2):
            result['lesson_type'] = subject_type_match.group(2).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π)
    teacher_match = re.search(r',\s*([^,]+?)\s*(?:,|$)', text)
    if teacher_match:
        result['teacher'] = teacher_match.group(1).strip()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏—Ç–æ—Ä–∏—é (–ø–æ—Å–ª–µ "–∞—É–¥.")
    classroom_match = re.search(r'–∞—É–¥\.\s*([^,\s]+)', text)
    if classroom_match:
        result['classroom'] = classroom_match.group(1).strip()
    
    return result

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è URL –¥–ª—è Markdown
def format_markdown_url(url):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç URL –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Markdown-—Å—Å—ã–ª–∫–∞—Ö Telegram.
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.
    """
    if not url:
        return ""
        
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
    url = url.strip().replace('\n', '').replace('\r', '').replace(' ', '%20')
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ URL –¥–ª—è Markdown
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        url = url.replace(char, f"\\{char}")
        
    return url

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
def sanitize_url_for_html(url):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML-—Ç–µ–≥–∞—Ö.
    –£–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –∏ –¥–µ–ª–∞–µ—Ç URL —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–º —Å HTML.
    """
    if not url:
        return ""
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    url = url.strip().replace('\n', '').replace('\r', '')
    
    # –ó–∞–º–µ–Ω–∞ –ø—Ä–æ–±–µ–ª–æ–≤ –Ω–∞ %20
    url = url.replace(' ', '%20')
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã HTML
    url = url.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
    url = url.replace('"', '&quot;').replace("'", '&#39;')
    
    return url

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ BeautifulSoup
def parse_schedule():
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —É—Å—Ç–æ–π—á–∏–≤—ã–π –∫ –ø—Ä–æ–±–ª–µ–º–∞–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
    """
    if not os.path.exists('templeraspisan.html'):
        logging.error("–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return "–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω."

    try:
        with open('templeraspisan.html', 'r', encoding='utf-8') as file:
            html_content = file.read()
            
        # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ HTML –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        html_content = preprocess_html(html_content)
            
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BeautifulSoup
        soup = BeautifulSoup(html_content, 'html.parser')
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        group_title = soup.find('h4')
        group_title_text = group_title.text.strip() if group_title else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π"
        
        # –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É—è HTML —Ç–µ–≥–∏ –≤–º–µ—Å—Ç–æ Markdown
        result = f"üìÖ <b>{group_title_text}</b>\n\n"
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–∞–±–ª–∏—Ü—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        table = soup.find('table')
        if not table:
            logging.warning("–¢–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return f"{result}\n–¢–∞–±–ª–∏—Ü–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ HTML
        # –ò—â–µ–º —è—á–µ–π–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–æ–º—É —Å—Ç–∏–ª—é background-color: #f6ecc8
        time_slots = []
        time_cells = table.select('td[style*="background-color: #f6ecc8"]')
        
        for cell in time_cells:
            if cell.find('b'):  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –æ–±—ã—á–Ω–æ –≤–Ω—É—Ç—Ä–∏ <b> —Ç–µ–≥–æ–≤
                slot_text = cell.text.strip()
                if '18:30' in slot_text or '20:10' in slot_text:
                    time_slots.append(slot_text)
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å—Ç–∏–ª—é, –∏—â–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
        if not time_slots:
            for td in table.find_all('td'):
                td_text = td.text.strip()
                if '18:30' in td_text or '20:10' in td_text:
                    time_slots.append(td_text)
        
        logging.info(f"–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã: {time_slots}")
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ü–≤–µ—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
        colors = {
            '–õ–µ–∫—Ü': 'üü¢',  # –∑–µ–ª–µ–Ω—ã–π
            '–ü—Ä–∞–∫': 'üîµ',  # —Å–∏–Ω–∏–π
            '–≠–∫–∑': 'üî¥',   # –∫—Ä–∞—Å–Ω—ã–π
            '–ó–∞—á': 'üü†',   # –æ—Ä–∞–Ω–∂–µ–≤—ã–π
            '–õ–∞–±': 'üü£',   # —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'default': 'üìö'  # –∫–Ω–∏–≥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–∞—Ç—É (–ø–∞—Ç—Ç–µ—Ä–Ω –î–î.–ú–ú –î–µ–Ω—å)
        lesson_rows = []
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –æ–Ω–∏ –∏–º–µ—é—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –¥–∞—Ç—ã –≤ –ø–µ—Ä–≤–æ–π —è—á–µ–π–∫–µ
        for row in table.find_all('tr'):
            cells = row.find_all('td')
            if not cells:
                continue
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –¥–∞—Ç—É
            date_cell = cells[0]
            date_text = date_cell.text.strip()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –î–î.–ú–ú –î–µ–Ω—å –∏–ª–∏ –î.–ú–ú –î–µ–Ω—å
            if re.search(r'\d{1,2}\.\d{2}\s+\w{2}\b', date_text):
                lesson_rows.append(row)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–Ω—è—Ç–∏—è–º–∏
        for row in lesson_rows:
            cells = row.find_all('td')
            
            if not cells or len(cells) < 2:
                continue
            
            # –ü–µ—Ä–≤–∞—è —è—á–µ–π–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞—Ç—É
            date_cell = cells[0]
            date_text = date_cell.text.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–∏—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥ <b> –≤–º–µ—Å—Ç–æ Markdown *)
            result += f"\nüóì <b>{date_text}</b>\n\n"
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —è—á–µ–π–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ (–∑–∞–Ω—è—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
            for idx, cell in enumerate(cells[1:], 0):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
                time_slot = time_slots[idx] if idx < len(time_slots) else f"–°–ª–æ—Ç {idx+1}"
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–Ω—è—Ç–∏—è
                lesson = extract_lesson_details(cell)
                if not lesson:
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —è—á–µ–π–∫–∏
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–µ
                if 'subject' not in lesson or not lesson['subject']:
                    continue
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
                lesson_type = lesson.get('lesson_type', '')
                icon = colors.get(lesson_type, colors['default'])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥–∏ –≤–º–µ—Å—Ç–æ Markdown)
                subject = lesson.get('subject', '')
                
                result += f"‚è∞ <b>{time_slot}</b>\n"
                result += f"{icon} <b>{subject}</b>"
                if lesson_type:
                    result += f" ({lesson_type})"
                result += "\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ
                teacher = lesson.get('teacher', '')
                if teacher:
                    result += f"üë®‚Äçüè´ {teacher}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞—É–¥–∏—Ç–æ—Ä–∏–∏
                classroom = lesson.get('classroom', '')
                if classroom:
                    result += f"üèõ –ê—É–¥: {classroom}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ (–æ–Ω–ª–∞–π–Ω)
                if lesson.get('is_online', False):
                    result += f"üíª <b>–û–ù–õ–ê–ô–ù</b>\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—Ä–∞–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
                if lesson.get('link'):
                    # –û—á–∏—â–∞–µ–º URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ HTML
                    clean_url = sanitize_url_for_html(lesson['link'])
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML-—Ç–µ–≥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                    result += f'üîó <a href="{clean_url}">–í—Ö–æ–¥ –Ω–∞ –ª–µ–∫—Ü–∏—é</a>\n'
                
                result += "\n"
        
        return result
    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}"

# –ö–æ–º–∞–Ω–¥–∞ /schedule
async def schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = parse_schedule()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ MARKDOWN –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    await update.message.reply_text(message, parse_mode=ParseMode.HTML)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –¥–∞—Ç–∞–º
async def rasspisan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫: /rasspisan 02.03.2025 - 05.03.2025
    args = context.args
    if len(args) != 3 or args[1] != '-':
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /rasspisan <–Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞> - <–∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞>\n–ü—Ä–∏–º–µ—Ä: /rasspisan 02.03.2025 - 05.03.2025")
        return

    date_from = args[0]
    date_end = args[2]
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    progress_message = await update.message.reply_text("–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")

    url = "http://inet.ibi.spb.ru/raspisan/rasp.php"

    headers = {
        "accept": "*/*",
        "accept-language": "ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7",
        "content-type": "application/x-www-form-urlencoded",
        "proxy-connection": "keep-alive"
    }

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º GROUP_ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    body = f"rtype=1&group={GROUP_ID}&exam=0&datafrom={date_from}&dataend={date_end}&formo=0&allp=0&hour=0&tuttabl=0"

    try:
        response = requests.post(url, headers=headers, data=body)
        response.raise_for_status()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        with open('templeraspisan.html', 'w', encoding='utf-8') as file:
            file.write(response.text)
            
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ server_response.html
        with open('server_response.html', 'w', encoding='utf-8') as file:
            file.write(response.text)

        # –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é parse_schedule 
        # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        result = parse_schedule()
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await progress_message.delete()

        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, —Ä–∞–∑–¥–µ–ª—è–µ–º –µ–≥–æ
        if len(result) > 4096:
            chunks = [result[i:i+4096] for i in range(0, len(result), 4096)]
            for chunk in chunks:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ MARKDOWN –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
                await update.message.reply_text(chunk, parse_mode=ParseMode.HTML)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –≤–º–µ—Å—Ç–æ MARKDOWN –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
            await update.message.reply_text(result, parse_mode=ParseMode.HTML)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Å–∞–π—Ç–∞: {str(e)}")
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await progress_message.delete()
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {str(e)}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        level=logging.INFO
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler('schedule', schedule))
    application.add_handler(CommandHandler('rasspisan', rasspisan))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    await application.run_polling()

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫ —Å event loop
if __name__ == '__main__':
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º asyncio.run
        asyncio.run(main())
    except RuntimeError as e:
        # –ï—Å–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ—à–∏–±–∫—É –æ —Ç–æ–º, —á—Ç–æ —Ü–∏–∫–ª —É–∂–µ –∑–∞–ø—É—â–µ–Ω,
        # –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥
        if "This event loop is already running" in str(e):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π event loop –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –Ω–µ–º –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            loop = asyncio.get_event_loop()
            loop.create_task(main())
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω
            if not loop.is_running():
                loop.run_forever()
        else:
            # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ—ë –¥–∞–ª—å—à–µ
            raise 